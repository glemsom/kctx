#############################################################
#            ██╗  ██╗ ██████╗████████╗██╗  ██╗              #
#            ██║ ██╔╝██╔════╝╚══██╔══╝╚██╗██╔╝              #
#            █████╔╝ ██║        ██║    ╚███╔╝               #
#            ██╔═██╗ ██║        ██║    ██╔██╗               #
#            ██║  ██╗╚██████╗   ██║   ██╔╝ ██╗              #
#            ╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚═╝  ╚═╝              # 
#############################################################
# Requirements: 
#               awk, sed, fzf and kubectl

# Test for requirements
REQUIREMENTS="awk sed fzf kubectl"
for REQUIREMENT in $REQUIREMENTS; do
	command -v $REQUIREMENT 1>/dev/null || {
		echo "Warning, requirement for kctx missing: $REQUIREMENT"
	}
done

# Make config folder if not exist
if [ ! -d ~/.config/kctx/ ]; then
	mkdir -p ~/.config/kctx/kubeconfig.d

	# Populate default config file
	cat > ~/.config/kctx/kctx.conf <<- EOF
		KUBECONFIGDIR=~/.config/kctx/kubeconfig.d # Unset to remove sourcing KUBECONFIG files from folder
		GEN_EXTRA_OPTS=" --minify=true"           # Extra options for kubectl config view. Use for example " --minify=true" to remove the non-selected contexts from tmp kubeconfig
	EOF
	source ~/.config/kctx/kctx.conf
else
	source ~/.config/kctx/kctx.conf
fi

# Configure KUBECONFIG from files in KUBECONFIGDIR
if [ ! -z "$KUBECONFIGDIR" ] && [ "$(ls -A $KUBECONFIGDIR)" ]; then
	export KUBECONFIG="$(find "$KUBECONFIGDIR" -type f | sed ':a;N;s/\n/:/;ba')"
fi

# Save original or autogenerated kubeconfig variable
ORIG_KUBECONFIG="$KUBECONFIG"
TMP_KUBECONFIG=/tmp/kctx-$$-kubeconfig
kctx() {
	# Select a new context
	SELECTED_CTX=$(KUBECONFIG="$ORIG_KUBECONFIG" kubectl config get-contexts  --no-headers=true | sed 's/^\*/ /g' | fzf -e --header="Select context" --no-sort | awk '{print $1'})

	# Store generated kubeconfig with new context
	NEW_KUBECONFIG_CONTENT=$(KUBECONFIG="$ORIG_KUBECONFIG" kubectl --context "$SELECTED_CTX" config view $GEN_EXTRA_OPTS --raw)

	# Create new kubeconfig for this shell
	echo "$NEW_KUBECONFIG_CONTENT" > "$TMP_KUBECONFIG"
	chmod 600 "$TMP_KUBECONFIG"

	# Use shell specific kubeconfig
	export KUBECONFIG="$TMP_KUBECONFIG"
}
trap "rm -f $TMP_KUBECONFIG" exit
